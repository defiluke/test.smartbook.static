{"version":3,"sources":["components/layout/Flex.tsx","hooks/useBlockGenerationTime.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","components/TokenImage/index.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useStake.ts","hooks/useUnstake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","hooks/useApprove.ts","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/Farms.tsx"],"names":["FlexLayout","styled","div","useBlockGenerationTime","useContext","BlockContext","blockGenerationTime","Wrapper","theme","colors","primary","ExpandableSectionButton","onClick","expanded","aria-label","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAddresses","quoteTokenSymbol","tokenAddresses","firstPart","QuoteToken","MATIC","contracts","wmatic","chainId","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","scanAddress","lpLabel","totalValueFormatted","addLiquidityUrl","TranslateString","withdrawalFee","useI18n","justifyContent","href","external","CoreTag","variant","outline","startIcon","CommunityTag","getImageUrlFromToken","tokenSymbol","toLowerCase","TokenPairImage","primaryTokenSymbol","secondaryTokenSymbol","props","primarySrc","secondarySrc","TokenImage","src","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","alignItems","mb","width","height","flexDirection","useStake","pid","type","dispatch","useDispatch","account","useWeb3React","masterChefContract","useMasterchef","onStake","useCallback","amount","a","stake","txHash","fetchFarmUserDataAsync","console","info","useUnstake","onUnstake","unstake","StyledSpacer","size","Spacer","s","spacing","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","value","inputTitle","showError","isBalanceZero","displayBalance","parseFloat","toFixed","style","position","pl","fontSize","toLocaleString","placeholder","mr","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","scale","disabled","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","Action","CardActions","farm","requestedApproval","setRequestedApproval","useFarmFromSymbol","lpSymbol","lpAddresses","useFarmUser","allowance","web3","useWeb3","lpAddress","getAddress","lpName","toUpperCase","isApproved","isGreaterThan","onApprove","lpContract","approve","tx","useApprove","getContract","handleApprove","error","textTransform","pr","mt","UnlockButton","fullWidth","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","removed","bossPrice","movrPrice","ethPrice","showExpandableSection","setShowExpandableSection","communityFarms","includes","totalValue","getFarmTvl","ethPriceUsd","Number","undefined","maximumFractionDigits","replace","earnLabel","dual","farmAPY","apy","times","BigNumber","WEEKS_PER_YEAR","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","display","isFinite","isNaN","toNumber","CardActionsContainer","FarmPage","Page","IgloosBgContainer","BgWrapper","IgloosContentContainer","Farms","farmsProps","path","useRouteMatch","tokenPerBlock","useTokenPerBlock","farmsLP","useFarms","usePriceTokenUsdt","usePriceMovrUsdt","usePriceEthUsdt","AVAX_BLOCK_TIME","BLOCKS_PER_WEEK","SECONDS_PER_YEAR","stakePoolsMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","isStakePool","inactiveFarms","farmsList","farmsToDisplay","bossPriceVsMOVR","find","BOSS_POOL_PID","tokenPriceVsQuote","tokenAmount","lpTotalInQuoteToken","pefiRewardPerBlock","poolWeight","rewardPerWeek","USDT","UST","ETH","BOSS","pefiApy","dualApy","rewardPerBlock","plus","exact"],"mappings":"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","file":"static/js/9.187a707b.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    margin: 0 8px;\n    margin-bottom: 32px;\n    width: 100%;\n\n    @media (min-width: 640px) {\n      min-width: 320px;\n      max-width: 50%;\n      width: unset;\n    }\n    @media (min-width: 768px) {\n      min-width: 320px;\n      max-width: 31.5%;\n      width: 100%;\n    }\n  }\n`\n\nexport default FlexLayout\n","import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlockGenerationTime = () => {\n  const { blockGenerationTime } = useContext(BlockContext)\n  return blockGenerationTime\n}\n\nexport default useBlockGenerationTime\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from 'uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","import { QuoteToken } from '../config/constants/types'\nimport contracts from '../config/constants/contracts'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === QuoteToken.MATIC ? contracts.wmatic[chainId] : quoteTokenAddresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from 'uikit'\n\nexport interface ExpandableSectionProps {\n  scanAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n  withdrawalFee?: string\n  feeLabel?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  scanAddress,\n  lpLabel,\n  totalValueFormatted,\n  addLiquidityUrl,\n  withdrawalFee,\n}) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={addLiquidityUrl}>{lpLabel}</StyledLinkExternal>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n        <Text>{totalValueFormatted}</Text>\n      </Flex>\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={scanAddress} bold={false}>\n          {TranslateString(356, 'View on Polygon Explorer')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from 'uikit'\n\nconst CoreTag = () => (\n  <Tag variant=\"primary\" outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag }\n","import React from 'react'\nimport {\n  ImageProps,\n  TokenImage as UIKitTokenImage,\n  TokenPairImage as UIKitTokenPairImage,\n  TokenPairImageProps as UIKitTokenPairImageProps\n} from 'uikit'\n\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\n  primaryTokenSymbol: string\n  secondaryTokenSymbol: string\n}\n\nconst getImageUrlFromToken = ( tokenSymbol: string ) => {\n  return `/images/tokens/${ tokenSymbol.toLowerCase() }.svg`\n}\n\nexport const TokenPairImage: React.FC<TokenPairImageProps> = ( { primaryTokenSymbol, secondaryTokenSymbol, ...props } ) => {\n  return (\n    <UIKitTokenPairImage\n      primarySrc={ getImageUrlFromToken( primaryTokenSymbol ) }\n      secondarySrc={ getImageUrlFromToken( secondaryTokenSymbol ) }\n      { ...props }\n    />\n  )\n}\n\ninterface TokenImageProps extends ImageProps {\n  tokenSymbol: string\n}\n\nexport const TokenImage: React.FC<TokenImageProps> = ( { tokenSymbol, ...props } ) => {\n  return <UIKitTokenImage src={ getImageUrlFromToken( tokenSymbol ) } { ...props } />\n}","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading } from 'uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { TokenImage, TokenPairImage } from 'components/TokenImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  tokenSymbol?: string\n  quoteTokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  tokenSymbol,\n  quoteTokenSymbol\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      { tokenSymbol === quoteTokenSymbol ?\n        <TokenImage tokenSymbol={ tokenSymbol } width={64} height={64}/> :\n        <TokenPairImage variant=\"inverted\" primaryTokenSymbol={ tokenSymbol } secondaryTokenSymbol={ quoteTokenSymbol } width={ 64 } height={ 64 }/>\n      }\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"primary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  fetchPoolsPublicDataAsync,\n} from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number, type?: string) => {\n  const dispatch = useDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef(type)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(fetchPoolsPublicDataAsync())\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  fetchPoolsPublicDataAsync,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number, type?: string) => {\n  const dispatch = useDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef(type)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = false\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(fetchPoolsPublicDataAsync())\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from 'uikit'\nimport useI18n from '../../hooks/useI18n'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  showError?: boolean\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  showError = true,\n}) => {\n  const TranslateString = useI18n()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = isBalanceZero ? '0' : parseFloat(max).toFixed(4)\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">\n            {TranslateString(1120, 'Balance')}: {displayBalance.toLocaleString()}\n          </Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput onChange={onChange} placeholder=\"0\" value={value} />\n          <Button size=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {TranslateString(452, 'Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && showError && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          No tokens to stake:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {TranslateString(999, 'get')} {symbol}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from 'uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1068, 'Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={TranslateString(1070, 'Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"primary\" onClick={onDismiss} scale=\"md\">\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          scale=\"md\"\n          disabled={pendingTx || fullBalance === '0' || val === '0'}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {TranslateString(999, 'Get')} {tokenName}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from 'uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1126, 'Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={TranslateString(588, 'Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} scale=\"md\">\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          scale=\"md\"\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from 'uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake LP')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from 'uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <Button\n        disabled={rawEarningsBalance === 0 || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n          setPendingTx(false)\n        }}\n      >\n        {TranslateString(562, 'Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { getContract } from 'utils/erc20'\nimport { getAddress } from 'utils/addressHelpers'\nimport { Button, Flex, Text } from 'uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport useWeb3 from 'hooks/useWeb3'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, type } = useFarmFromSymbol(farm.lpSymbol)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid, type)\n  const web3 = useWeb3()\n  const lpAddress = getAddress(lpAddresses)\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    return getContract(web3, lpAddress)\n  }, [web3, lpAddress])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    // return  <StakeAction\n    //     stakedBalance={stakedBalance}\n    //     tokenBalance={tokenBalance}\n    //     tokenName={lpName}\n    //     pid={pid}\n    //     addLiquidityUrl={addLiquidityUrl}\n    //   />\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" scale=\"md\" disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(758, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          BOSS\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"primary\" fontSize=\"12px\">\n          {TranslateString(1072, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"primary\" fontSize=\"12px\">\n          {TranslateString(1074, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, usePenguin, useSousChef, useLottery, useStrategyContract } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract, type?: string) => {\n  const dispatch = useDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef(type)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Farm\nexport const useStrategyApprove = (lpContract: Contract, lpSymbol: string, type: string) => {\n  const dispatch = useDispatch()\n  const { account } = useWeb3React()\n  const strategyContract = useStrategyContract(lpSymbol, type);\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, strategyContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, strategyContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account } = useWeb3React()\n  const penguinContract = usePenguin()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(penguinContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, penguinContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWeb3React()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text } from 'uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL, WEEKS_PER_YEAR } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getFarmTvl } from 'utils/getFarmTvl'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n\t0% {\n\t\tbackground-position: 0% 50%;\n\t}\n\t50% {\n\t\tbackground-position: 100% 50%;\n\t}\n\t100% {\n\t\tbackground-position: 0% 50%;\n\t}\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  bossPrice?: BigNumber\n  movrPrice?: BigNumber\n  ethPrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, bossPrice, movrPrice, ethPrice, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n\n  const totalValue: BigNumber = useMemo(\n    () => getFarmTvl(farm, { movrPrice, bossPrice, ethPriceUsd: ethPrice }),\n    [farm, movrPrice, bossPrice, ethPrice]\n  );\n\n  const totalValueFormatted = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 2 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'BOSS'\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(WEEKS_PER_YEAR)).times(new BigNumber(100))\n\n  // console.log({farmAPY, isnan: farmAPY.isNaN(), isFinite: farmAPY.isFinite()})\n\n  const { quoteTokenAddresses, quoteTokenSymbol, tokenAddresses } = farm\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddresses, quoteTokenSymbol, tokenAddresses })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'BOSS' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={isCommunityFarm}\n        tokenSymbol={farm.tokenSymbol}\n        quoteTokenSymbol={farm.quoteTokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{TranslateString(736, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {`${farmAPY && farmAPY.isFinite() && !farmAPY.isNaN() ? farmAPY.toNumber().toFixed(2) : '--'}%`}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text fontSize=\"1rem\">{TranslateString(316, 'Withdrawal Fee')}:</Text>\n        <Text>{`${farm.withdrawalFee} %`}</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          scanAddress={`https://polygonscan.com/address/${\n            getAddress(farm.lpAddresses)\n          }`}\n          totalValueFormatted={totalValueFormatted}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n          withdrawalFee={farm.withdrawalFee}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React, { useCallback, useEffect } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { BOSS_POOL_PID, SECONDS_PER_YEAR, WEEKS_PER_YEAR } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceTokenUsdt, usePriceEthUsdt, usePriceMovrUsdt, useTokenPerBlock } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport useBlockGenerationTime from 'hooks/useBlockGenerationTime'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport { Text, Header, Hero } from 'uikit'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\n\nexport interface FarmsProps{\n  stakePoolsMode?: boolean\n}\n\n//\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const tokenPerBlock = useTokenPerBlock()\n  const farmsLP = useFarms()\n  const bossPrice = usePriceTokenUsdt()\n  const movrPrice = usePriceMovrUsdt()\n  const { account } = useWeb3React()\n  const ethPriceUsd = usePriceEthUsdt()\n  const AVAX_BLOCK_TIME = useBlockGenerationTime()\n  const BLOCKS_PER_YEAR = new BigNumber( SECONDS_PER_YEAR ).div( new BigNumber( AVAX_BLOCK_TIME ) )\n  const BLOCKS_PER_WEEK = BLOCKS_PER_YEAR.div( new BigNumber( WEEKS_PER_YEAR ) )\n  const { stakePoolsMode } = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect( () => {\n    if ( account ) {\n      dispatch( fetchFarmUserDataAsync( account ) )\n    }\n  }, [ account, dispatch, fastRefresh ] )\n\n  // const [stackedOnly, setStackedOnly] = useState(false)\n  // const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n  // const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X')\n  const activeFarms = farmsLP.filter( ( farm ) => ( stakePoolsMode ? farm.isStakePool === true : !farm.isStakePool ) && farm.multiplier !== '0X' )\n  const inactiveFarms = farmsLP.filter( ( farm ) => ( stakePoolsMode ? farm.isStakePool === true : !farm.isStakePool ) && farm.multiplier === '0X' )\n  // const stackedOnlyFarms = activeFarms.filter(\n  //   (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  // )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n\n  const farmsList = useCallback(\n    ( farmsToDisplay, removed: boolean ) => {\n      const bossPriceVsMOVR = new BigNumber( farmsLP.find( ( farm ) => farm.pid === BOSS_POOL_PID )?.tokenPriceVsQuote || 0 )\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map( ( farm ) => {\n        if ( !farm.tokenAmount || !farm.lpTotalInQuoteToken ) {\n          return farm\n        }\n        const pefiRewardPerBlock = tokenPerBlock.times( farm.poolWeight )\n        const rewardPerWeek = pefiRewardPerBlock.times( BLOCKS_PER_WEEK )\n\n        // pefiPriceInQuote * rewardPerWeek / lpTotalInQuoteToken\n        let apy = bossPriceVsMOVR.times( rewardPerWeek ).div( farm.lpTotalInQuoteToken )\n\n        if ( farm.quoteTokenSymbol === QuoteToken.USDT || farm.quoteTokenSymbol === QuoteToken.UST ) {\n          apy = bossPriceVsMOVR.times( rewardPerWeek ).div( farm.lpTotalInQuoteToken ).times( movrPrice )\n        } else if ( farm.quoteTokenSymbol === QuoteToken.ETH ) {\n          apy = bossPrice.div( ethPriceUsd ).times( rewardPerWeek ).div( farm.lpTotalInQuoteToken )\n        } else if ( farm.quoteTokenSymbol === QuoteToken.BOSS ) {\n          apy = rewardPerWeek.div( farm.lpTotalInQuoteToken )\n        } else if ( farm.dual ) {\n          const pefiApy =\n            farm && bossPriceVsMOVR.times( pefiRewardPerBlock ).times( BLOCKS_PER_WEEK ).div( farm.lpTotalInQuoteToken )\n          const dualApy =\n            farm.tokenPriceVsQuote &&\n            new BigNumber( farm.tokenPriceVsQuote )\n              .times( farm.dual.rewardPerBlock )\n              .times( BLOCKS_PER_WEEK )\n              .div( farm.lpTotalInQuoteToken )\n\n          apy = pefiApy && dualApy && pefiApy.plus( dualApy )\n        }\n\n        return { ...farm, apy }\n      } )\n      return farmsToDisplayWithAPY.map( ( farm ) => (\n        <FarmCard\n          key={ farm.pid }\n          farm={ farm }\n          removed={ removed }\n          movrPrice={ movrPrice }\n          bossPrice={ bossPrice }\n          ethPrice={ ethPriceUsd }\n          account={ account }\n        />\n      ) )\n    },\n    [ BLOCKS_PER_WEEK, tokenPerBlock, farmsLP, movrPrice, ethPriceUsd, bossPrice, account ],\n  )\n\n  return (\n    <FarmPage>\n      <BgWrapper>\n        <IgloosBgContainer/>\n      </BgWrapper>\n      <Hero>\n        <Header color=\"primary\">Farms</Header>\n        <Text>Stake LP tokens to earn BOSS</Text>\n      </Hero>\n      {/* <FarmTabButtons stackedOnly={stackedOnly} setStackedOnly={setStackedOnly} /> */ }\n      <IgloosContentContainer>\n        {/* <Divider /> */ }\n\n        <FlexLayout>\n          <Route exact path={ `${ path }` }>\n            {/* {stackedOnly ? farmsList(stackedOnlyFarms, false) : farmsList(activeFarms, false)} */ }\n            { farmsList( activeFarms, false ) }\n          </Route>\n          <Route exact path={ `${ path }/history` }>\n            { farmsList( inactiveFarms, true ) }\n          </Route>\n        </FlexLayout>\n        {/* <IgloosPenguinImgContainer>\n          <IgloosPenguinImg alt=\"igloos penguin\" />\n        </IgloosPenguinImgContainer> */ }\n      </IgloosContentContainer>\n    </FarmPage>\n  )\n}\n\nconst FarmPage = styled( Page )`\n  max-width: 1200px;\n`\n\n// bg\nconst IgloosBgContainer = styled.div`\n  background-image: url('/images/home/movr-tile.png');\n  background-repeat: repeat;\n  position: absolute;\n  top: -8px;\n  bottom: -8px;\n  right: 0px;\n  left: 0px;\n  z-index: -1;\n`\n\nconst BgWrapper = styled.div`\n  background: ${ ( { theme } ) => `${theme.colors.primary}08` };\n  position: absolute;\n  top: 0px;\n  bottom: 0px;\n  right: 0px;\n  left: 0px;\n  z-index: -1;\n`\n\n// content\nconst IgloosContentContainer = styled.div`\n  position: relative;\n`\n\nexport default Farms\n"],"sourceRoot":""}