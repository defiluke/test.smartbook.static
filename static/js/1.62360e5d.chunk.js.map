{"version":3,"sources":["hooks/useI18n.ts","utils/callHelpers.ts","hooks/useContract.ts","config/constants/index.ts","hooks/useWeb3.ts","hooks/useHarvest.ts","components/UnlockButton.tsx","utils/erc20.ts","utils/getFarmTvl.ts"],"names":["useI18n","translations","useContext","TranslationsContext","translationId","fallback","data","length","foundTranslation","find","translation","stringId","text","includesVariable","includes","interpolatedText","isEmpty","Object","keys","forEach","dataKey","templateKey","RegExp","replace","approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","BigNumber","times","pow","toString","gas","on","tx","transactionHash","sousStake","sousChefContract","enter","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","leave","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","useContract","abi","contractOptions","web3","useWeb3","useState","eth","Contract","contract","setContract","useEffect","usePenguin","getBossAddress","erc20","useLottery","lottery","getLotteryAddress","useMasterchef","type","masterChef","masterChefAddress","getMasterChefAddress","getFarmMasterChefAbi","getFarmMasterChefAddress","useStrategyContract","lpSymbol","getStrategyAbi","strategyAddress","getStrategyAddress","useSousChef","id","config","poolsConfig","pool","sousId","rawAbi","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","getAddress","contractAddress","communityFarms","farmsConfig","filter","farm","isCommunity","map","tokenSymbol","library","useWeb3React","refEth","useRef","Web3","getWeb3NoAccount","setweb3","current","useHarvest","farmPid","dispatch","useDispatch","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","StyledUnlockedButton","styled","Button","theme","colors","secondary","isDark","UnlockButton","props","TranslateString","useAuth","login","logout","onPresentConnectModal","useWalletModal","onClick","web3NoAccount","getContract","getTokenBalance","tokenAddress","userAddress","balanceOf","call","balance","getFarmTvl","prices","bossPrice","movrPrice","ethPriceUsd","quoteTokenSymbol","tokenAmount","quoteTokenAmount","isNaN","farmQuoteTokenPrice","QuoteToken","BOSS","MATIC","ETH"],"mappings":"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","file":"static/js/1.62360e5d.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { isEmpty } from 'lodash'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\ninterface ContextData {\n  [key: string]: number | string\n}\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string, data: ContextData = {}) => {\n    if (translations.length === 0) {\n      return fallback\n    }\n\n    const foundTranslation = translations.find((translation) => {\n      return translation.data.stringId === translationId\n    })\n\n    if (foundTranslation) {\n      const { text } = foundTranslation.data\n      const includesVariable = text.includes('%')\n\n      if (includesVariable) {\n        let interpolatedText = text\n\n        // If dynamic tags are found but no data was passed return the fallback\n        if (isEmpty(data)) {\n          return fallback\n        }\n\n        Object.keys(data).forEach((dataKey) => {\n          const templateKey = new RegExp(`%${dataKey}%`, 'g')\n          interpolatedText = interpolatedText.replace(templateKey, data[dataKey])\n        })\n\n        return interpolatedText\n      }\n\n      return text\n    }\n\n    return fallback\n  }\n}\n\nexport default useI18n\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const claimXPefi = async (strategyContract, account) => {\n  return strategyContract.methods.claimXPEFI().send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  // if (pid === 0) {\n  //   return masterChefContract.methods\n  //     .enterStaking(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n  //     .send({ from: account, gas: 200000 })\n  //     .on('transactionHash', (tx) => {\n  //       return tx.transactionHash\n  //     })\n  // }\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const compounderStake = async (strategyContract, amount, account) => {\n  return strategyContract.methods\n    .deposit(amount)\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .enter(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: 200000, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  // if (pid === 0) {\n  //   return masterChefContract.methods\n  //     .leaveStaking(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n  //     .send({ from: account, gas: 200000 })\n  //     .on('transactionHash', (tx) => {\n  //       return tx.transactionHash\n  //     })\n  // }\n\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const compounderUnstake = async (strategyContract, amount, account) => {\n  return strategyContract.methods\n    .withdraw(amount)\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return sousChefContract.methods\n    .leave(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  // if (pid === 0) {\n  //   return masterChefContract.methods\n  //     .leaveStaking('0')\n  //     .send({ from: account, gas: 200000 })\n  //     .on('transactionHash', (tx) => {\n  //       return tx.transactionHash\n  //     })\n  // }\n\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: 200000, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\n// normal emperor events\nexport const registerEmperor = async (emperorContract, { nickName, color, style }, account) => {\n  return emperorContract.methods\n    .registerYourPenguin(nickName, color, style.toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const changeEmperorStyle = async (emperorContract, style, account) => {\n  return emperorContract.methods\n    .changeStyle(style)\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const changeEmperorColor = async (emperorContract, color, account) => {\n  return emperorContract.methods\n    .changeColor(color)\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const stealCrown = async (emperorContract, amount, account) => {\n  return emperorContract.methods\n    .stealCrown(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account, gas: 400000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const stealCrownAndPoison = async (emperorContract, amount, account) => {\n  return emperorContract.methods\n    .stealCrownAndPoison(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account, gas: 400000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const approveXPefi = async (xPefiContract, account, address) => {\n  const approveAmount = '1000000000000000000000000000'\n  return xPefiContract.methods\n    .approve(address, new BigNumber(approveAmount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const approvePefi = async (pefiContract, account, address) => {\n  const approveAmount = '1000000000000000000000000000'\n  return pefiContract.methods\n    .approve(address, new BigNumber(approveAmount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\n// charity events\nexport const registerCharityEmperor = async (donationContract, { nickName, color, style }, account) => {\n  return donationContract.methods\n    .registerYourPenguin(nickName, color, style.toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const changeCharityEmperorStyle = async (donationContract, style, account) => {\n  return donationContract.methods\n    .changeStyle(style)\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const changeCharityEmperorColor = async (donationContract, color, account) => {\n  return donationContract.methods\n    .changeColor(color)\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const donateAvax = async (donationContract, amount, account) => {\n  return donationContract.methods\n    .donateAvax()\n    .send({ from: account, gas: 450000, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const donatePefi = async (donationContract, amount, account) => {\n  return donationContract.methods\n    .donatePefi(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account, gas: 450000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getAddress,\n  getMasterChefAddress,\n  getBossAddress,\n  getLotteryAddress,\n  getLotteryTicketAddress,\n  getBunnyFactoryAddress,\n  getPancakeProfileAddress,\n  getPancakeRabbitsAddress,\n  getPointCenterIfoAddress,\n  getBunnySpecialAddress,\n  getEmperorAddress,\n  getWithoutBordersAddress as getCharityEmperorAddress,\n  getCharityPenguinDBAddress,\n  getEmperorPenguinDBAddress,\n  getXPefiAddress,\n} from 'utils/addressHelpers'\nimport getFarmMasterChefAddress from 'utils/getFarmMasterChefAddress'\nimport getFarmMasterChefAbi from 'utils/getFarmMasterChefAbi'\nimport getStrategyAddress from 'utils/getStrategyAddress'\nimport getStrategyAbi from 'utils/getStrategyAbi'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ifo from 'config/abi/ifo.json'\nimport erc20 from 'config/abi/erc20.json'\nimport bunnyFactory from 'config/abi/bunnyFactory.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\nimport profile from 'config/abi/pancakeProfile.json'\nimport pointCenterIfo from 'config/abi/pointCenterIfo.json'\nimport bunnySpecial from 'config/abi/bunnySpecial.json'\nimport emperor from 'config/abi/emperor.json'\nimport donations from 'config/abi/donations.json'\nimport charityPenguinDB from 'config/abi/charityPenguin.json'\nimport emperorPenguinDB from 'config/abi/emperorPenguinDB.json'\nimport xPefi from 'config/abi/xPefi.json'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = (ifo as unknown) as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = (erc20 as unknown) as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const usePenguin = () => {\n  return useERC20(getBossAddress())\n}\n\nexport const useBunnyFactory = () => {\n  const bunnyFactoryAbi = (bunnyFactory as unknown) as AbiItem\n  return useContract(bunnyFactoryAbi, getBunnyFactoryAddress())\n}\n\nexport const usePancakeRabbits = () => {\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\n  return useContract(pancakeRabbitsAbi, getPancakeRabbitsAddress())\n}\n\nexport const useProfile = () => {\n  const profileABIAbi = (profile as unknown) as AbiItem\n  return useContract(profileABIAbi, getPancakeProfileAddress())\n}\n\nexport const useLottery = () => {\n  const abi = (lottery as unknown) as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = (lotteryTicket as unknown) as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterchef = (type?: string) => {\n  let abi = (masterChef as unknown) as AbiItem\n  let masterChefAddress = getMasterChefAddress()\n  if (type) {\n    abi = (getFarmMasterChefAbi(type) as unknown) as AbiItem\n    masterChefAddress = getFarmMasterChefAddress(type)\n  }\n  return useContract(abi, masterChefAddress)\n}\n\nexport const useStrategyContract = (lpSymbol: string, type: string) => {\n  const abi = (getStrategyAbi(lpSymbol, type) as unknown) as AbiItem\n  const strategyAddress = getStrategyAddress(lpSymbol, type)\n  return useContract(abi, strategyAddress)\n}\n\nexport const useSousChef = (id) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  const abi = (rawAbi as unknown) as AbiItem\n  return useContract(abi, getAddress(config.contractAddress))\n}\n\nexport const usePointCenterIfoContract = () => {\n  const abi = (pointCenterIfo as unknown) as AbiItem\n  return useContract(abi, getPointCenterIfoAddress())\n}\n\nexport const useBunnySpecialContract = () => {\n  const abi = (bunnySpecial as unknown) as AbiItem\n  return useContract(abi, getBunnySpecialAddress())\n}\n\n// emperor\nexport const useEmperor = () => {\n  const abi = (emperor as unknown) as AbiItem\n  return useContract(abi, getEmperorAddress())\n}\n\nexport const useEmperorPenguinDB = () => {\n  const abi = (emperorPenguinDB as unknown) as AbiItem\n  return useContract(abi, getEmperorPenguinDBAddress())\n}\n\n// covid emperor\nexport const useCharityEmperor = () => {\n  const abi = (donations as unknown) as AbiItem\n  return useContract(abi, getCharityEmperorAddress())\n}\n\nexport const useCharityPenguinDB = () => {\n  const abi = (charityPenguinDB as unknown) as AbiItem\n  return useContract(abi, getCharityPenguinDBAddress())\n}\n\nexport const useXPefi = () => {\n  const abi = (xPefi as unknown) as AbiItem\n  return useContract(abi, getXPefiAddress())\n}\n\nexport default useContract\n","import farmsConfig from './farms'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport { getWeb3NoAccount } from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : getWeb3NoAccount())\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : getWeb3NoAccount())\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, useWalletModal } from 'uikit'\nimport useAuth from 'hooks/useAuth'\nimport useI18n from 'hooks/useI18n'\n\nconst StyledUnlockedButton = styled(Button)`\n  background: ${({ theme }) => theme.colors.secondary };\n  color: ${({ theme }) => theme.isDark && '#ffffff'};\n`\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <StyledUnlockedButton onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </StyledUnlockedButton>\n  )\n}\n\nexport default UnlockButton\n","import Web3 from 'web3'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\nimport { getWeb3NoAccount } from 'utils/web3'\n\nconst web3NoAccount = getWeb3NoAccount()\nexport const getContract = (web3: Web3, address: string) => {\n  const _web3 = web3 ?? web3NoAccount\n\n  const contract = new _web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (web3: Web3, tokenAddress: string, userAddress: string): Promise<string> => {\n  const contract = getContract(web3, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { QuoteToken } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { Farm } from '../state/types'\n\nexport interface BasisPrices {\n  movrPrice: BigNumber | null,\n  bossPrice: BigNumber | null,\n  ethPriceUsd: BigNumber | null\n}\n\nexport function getFarmTvl( farm: Farm, prices: BasisPrices ): BigNumber\n{\n  const { bossPrice, movrPrice, ethPriceUsd } = prices;\n\n  const tokenSymbol = farm.quoteTokenSymbol\n  const tokenAmount = new BigNumber( farm.quoteTokenAmount )\n\n  if ( tokenAmount.isNaN() ) {\n    // console.warn('tokenAmount of', tokenSymbol, 'is NaN.');\n    return new BigNumber( '0' )\n  }\n\n  let farmQuoteTokenPrice = null\n  switch ( tokenSymbol ) {\n    case QuoteToken.BOSS:\n      farmQuoteTokenPrice = bossPrice\n      break\n\n    case QuoteToken.MATIC:\n      farmQuoteTokenPrice = movrPrice\n      break\n\n    case QuoteToken.ETH:\n      farmQuoteTokenPrice = ethPriceUsd\n      break\n\n    default:\n      farmQuoteTokenPrice = new BigNumber( 1 )\n  }\n\n  return farmQuoteTokenPrice.times( new BigNumber( tokenAmount ) )\n                            .times( new BigNumber( 2 ) )\n}"],"sourceRoot":""}